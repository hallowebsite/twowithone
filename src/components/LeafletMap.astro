---
import "leaflet/dist/leaflet.css";
export interface Props {
  latitude: number;
  longitude: number;
  zoom: number;
  /** the DOM ID of a <div> element */
  containerstyle?: string;
  markers?: string;
}

const {
  latitude,
  longitude,
  zoom,
  containerstyle = "height: 61.8vh",
  markers = [],
} = Astro.props;
---

<leaflet-map
  data-latitude={latitude}
  data-longitude={longitude}
  data-zoom={zoom}
  data-containerstyle={containerstyle}
  data-markers={markers}
>
  <div id="leafletMap" style={containerstyle}></div>
  <script>
    import L from "leaflet";
    const tileLayer = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png";
    const attribution =
      "Â© <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors";

    class LeafletMap extends HTMLElement {
      constructor() {
        super();

        const latlng: [number, number] = [
          Number(this.dataset.latitude),
          Number(this.dataset.longitude),
        ];

        const map = L.map("leafletMap", {
          minZoom: 3,
        }).setView(latlng, Number(this.dataset.zoom));
        L.tileLayer(tileLayer, {
          attribution: attribution,
        }).addTo(map);
        const markers = JSON.parse(this.dataset.markers || "[]");
        markers.forEach((marker: any) => {
          const divIcon = L.divIcon({
            html: `<p class="badge badge-primary">${marker.title}</p>`,
            className: "remove-leaflet-icon-styles",
          });
          const popupHtml = `
      <div class="popup">
      <img src="${marker.image}"/>
      <div class="popup-content">
        <span class="popup-original">${marker.original}</span>
    ${marker.transliteration ? `<span>${marker.transliteration}</span>` : ""}
        <span>${marker.meaning}</span>
          <a href="${marker.link}" class="link">${marker.title}</a>
      </div>
      </div>
    `;
          const popup = L.popup().setContent(popupHtml);
          const [lat, long] = marker.location;
          L.marker([Number(lat), Number(long)], {
            icon: divIcon,
            title: marker.title,
          })
            .bindPopup(popup)
            .addTo(map);
        });
      }
    }

    customElements.define("leaflet-map", LeafletMap);
  </script>
</leaflet-map>

<style is:global>
  .remove-leaflet-icon-styles {
    border: none;
  }
  .popup {
    display: grid;
    grid-template-columns: 100px auto;
    gap: 0.5rem;
  }

  .popup-content {
    display: flex;
    height: 100%;
    flex-direction: column;
    gap: 0.5rem;
  }
  .popup-original {
    font-weight: 700;
  }

  .popup .link {
    margin-top: auto;
  }
  .popup img {
    width: 100px;
    height: 100px;
    object-fit: cover;
  }
</style>
