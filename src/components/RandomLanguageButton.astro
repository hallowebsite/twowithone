---
import { Locales } from "@/i18n/ui";
import { getMatchingLocale } from "@/i18n/utils";
import { getCollection } from "astro:content";

const englishLanguages = await getCollection("languages", ({ id }) => {
  return id.startsWith("en/");
});
const germanLanguages = await getCollection("languages", ({ id }) => {
  return id.startsWith("de/");
});

const localesList = Astro.preferredLocaleList;
const localeToUse = getMatchingLocale(localesList);
const languages =
  localeToUse === Locales.en ? englishLanguages : germanLanguages;
const allLanguagesSlugs = languages.map((entry) => entry.slug);

const { currentSlug, lang } = Astro.props;
---

<random-language-button
  data-slugs={allLanguagesSlugs}
  data-currentSlug={currentSlug}
  data-lang={lang}
>
  <a
    role="button"
    id="randomLanguage"
    class="btn mb-4 mt-2 btn-primary btn-block btn-lg"
    href="/">Go to other random langugage</a
  >
  <label class="flex gap-2 items-center">
    <input
      type="checkbox"
      id="allowLocalStorage"
      class="checkbox checkbox-primary checkbox-md"
    />
    <span class="text-sm"
      >Avoid duplicates (we will need to store information about languages you
      visited on your device)
    </span>
  </label>
  <script>
    import { navigate } from "astro:transitions/client";
    import { getRelativeLocaleUrl } from "astro:i18n";
    class RandomLanguageButton extends HTMLElement {
      private slugs: string[] = [];
      private visitedSlugs: string[] | null = null;
      private locale: string = "en";

      constructor() {
        super();
        const button = this.querySelector("#randomLanguage");
        const input = this.querySelector("input");
        this.slugs = this.getAttribute("data-slugs")?.split(",") || [];
        this.locale = this.getAttribute("data-lang") || "en";
        const currentSlug = this.getAttribute("data-currentSlug") || null;
        if (!button) {
          return;
        }
        const localStorageVisitedSlugs =
          localStorage.getItem("visitedLanguages");
        if (localStorageVisitedSlugs && input) {
          this.visitedSlugs = JSON.parse(localStorageVisitedSlugs);
          input.checked = true;
        }
        button.addEventListener("click", (e) => {
          e.preventDefault();
          const randomSlug = this.getRandomSlug(this.slugs);
          if (this.visitedSlugs) {
            this.visitedSlugs.push(randomSlug);
            localStorage.setItem(
              "visitedLanguages",
              JSON.stringify(this.visitedSlugs),
            );
          }
          const path = getRelativeLocaleUrl(this.locale, randomSlug);
          navigate(path);
        });

        input?.addEventListener("change", (e) => {
          const checked = (e.target as HTMLInputElement).checked;
          if (checked) {
            this.visitedSlugs = currentSlug ? [currentSlug] : [];
            localStorage.setItem(
              "visitedLanguages",
              JSON.stringify(this.visitedSlugs),
            );
          } else {
            this.visitedSlugs = null;
            localStorage.removeItem("visitedLanguages");
          }
        });
      }

      getRandomSlug(slugs: string[]) {
        const slugsToChooseFrom = this.visitedSlugs
          ? slugs.filter((slug) => !this.visitedSlugs?.includes(slug))
          : slugs;
        if (slugsToChooseFrom.length === 0) {
          this.visitedSlugs = [];
          localStorage.setItem(
            "visitedLanguages",
            JSON.stringify(this.visitedSlugs),
          );
          return slugs[Math.floor(Math.random() * slugs.length)];
        }
        return slugsToChooseFrom[
          Math.floor(Math.random() * slugsToChooseFrom.length)
        ];
      }
    }
    customElements.define("random-language-button", RandomLanguageButton);
  </script>
</random-language-button>

<style>
  random-language-button {
    display: flex;
    flex-direction: column;
  }
</style>
