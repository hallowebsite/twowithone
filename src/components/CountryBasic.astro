---
import type { CollectionEntry } from "astro:content";
import { Picture, getImage } from "astro:assets";
import { getAbsoluteLocaleUrl } from "astro:i18n";
import { Locales } from "@/i18n/ui";
import { useTranslations } from "@/i18n/utils";
import type { ImageMetadata } from "astro";
import { getCollection } from "astro:content";
import { reorderSlugs, getNextSlug } from "@/helpers/languageChoiceHelpers";

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/images/*.{jpeg,jpg,png,gif}",
);

interface Props {
  language: CollectionEntry<"languages">;
}
const { language } = Astro.props;
const { Content } = await language.render();

const englishLanguages = await getCollection("languages", ({ id }) => {
  return id.startsWith("en/");
});
const germanLanguages = await getCollection("languages", ({ id }) => {
  return id.startsWith("de/");
});

// Split the slug into locale and slugWithoutPath
const [locale, slugWithoutPath] = language.slug.split("/");

const languages = locale === Locales.de ? germanLanguages : englishLanguages;
const allLanguagesSlugs = languages.map((entry) => entry.slug);
const orderOfSlugsForToday = reorderSlugs(allLanguagesSlugs);
const nextSlug = getNextSlug(orderOfSlugsForToday, language.slug);

const imagePath = `/src/images/${slugWithoutPath}.jpg`;

// Check if the image exists in the images object
const imageExists = images.hasOwnProperty(imagePath);
const backgorundImageUrl = await getImage({
  src: images[imagePath](),
  width: 1000,
  height: 1000,
});

const t = useTranslations(locale as Locales);
---

<section
  class="container max-w-screen-xl mx-auto my-2 md:my-8 flex flex-col gap-8 items-center"
>
  <div class="card lg:card-side lg:grid lg:grid-cols-2 bg-base-100 shadow-xl">
    <div
      class="bg-base-100 aspect-square overflow-hidden flex items-center w-full max-h-48 md:max-h-56 lg:max-h-full"
    >
      {
        imageExists && (
          <Picture
            pictureAttributes={{ style: "height: 100%; width:100%" }}
            class="main-image h-full object-cover object-center w-full"
            sizes="(max-width: 600px) 100vw, 630px"
            widths={[630, 1260, 1890, 2520]}
            formats={["webp", "avif", "jpeg"]}
            src={images[imagePath]()}
            alt={language.data.imageAlt || ""}
          />
        )
      }
    </div>

    <div class="card-body bg-success-content">
      <p class="text-xl">
        {t("card.inXWeSay", language.data.languageName)}
      </p>
      <h2
        dir={language.data.textDirection === "rtl" ? "rtl" : "ltr"}
        class:list={[
          "card-title text-3xl md:text-4xl font-serif",
          { rtl: language.data.textDirection === "rtl" },
        ]}
      >
        {language.data.original}
      </h2>
      {
        language.data.transliteration && (
          <p
            class:list={[
              "text-m italic",
              { "text-right": language.data.textDirection === "rtl" },
            ]}
          >
            {language.data.transliteration}
          </p>
        )
      }
      <span>{t("card.literally")}</span>
      <p class="text-2xl">{language.data.meaning}</p>
      <div class="card-actions">
        <a
          role="button"
          id="randomLanguage"
          class="btn mb-4 mt-2 btn-primary btn-block btn-lg"
          href={`/${nextSlug}`}>{t("random.button")}</a
        >
      </div>
    </div>
  </div>
</section>

<section class="container w-full max-w-screen-xl mx-auto my-24">
  <div
    style={`background-image: url(${backgorundImageUrl.src})`}
    class="image-bg shadow-xl bg-accent"
  >
    <div
      class="p-8 max-w-screen-md shadow-xl bg-success-content mx-auto flex flex-col gap-8"
    >
      <article
        class="mx-auto w-full prose md:prose-lg xl:prose-xl dark:prose-invert"
      >
        {
          language.body.length > 10 && (
            <>
              <Content />
            </>
          )
        }
        <p class="text-sm">
          {
            t(
              "card.publishedOn",
              language.data.pubDate
                .toLocaleDateString(locale, {
                  year: "numeric",
                  month: "short",
                  day: "numeric",
                })
                .toString(),
            )
          }
        </p>
        <p class="text-sm">
          {t("card.permalink")}
          <a href={getAbsoluteLocaleUrl(locale, slugWithoutPath)}>
            {`${getAbsoluteLocaleUrl(locale, slugWithoutPath)}`}
          </a>
        </p>
      </article>
    </div>
  </div>
</section>

<style>
  .image-bg {
    padding: 2rem;
    background-size: cover;
    background-position: center;
    background-blend-mode: difference;
  }
</style>
